export const lifeDomains = {
    "Health & Wellness": [
      "Balance",
      "Vitality",
      "Mindfulness",
      "Stability",
      "Discipline",
      "Growth",
      "Happiness",
      "Optimism",
      "Perseverance",
      "Compassion",
      "Flexibility",
      "Gratitude",
      "Patience",
      "Achievement",
    ],
    "Spirituality & Beliefs": [
      "Gratitude",
      "Vision",
      "Humility",
      "Patience",
      "Authenticity",
      "Courage",
      "Empathy",
      "Equality",
      "Integrity",
      "Kindness",
      "Loyalty",
      "Mindfulness",
      "Service",
      "Spirituality",
      "Tradition",
      "Trust",
      "Love",
      "Forgiveness",
      "Generosity",
      "Honoring Commitments",
    ],
    "Career & Work": [
      "Innovation",
      "Knowledge",
      "Leadership",
      "Perseverance",
      "Responsibility",
      "Success",
      "Vision",
      "Discipline",
      "Authenticity",
      "Creativity",
      "Passion",
      "Humility",
      "Integrity",
      "Teamwork",
      "Contribution",
      "Flexibility",
      "Growth",
      "Independence",
      "Learning",
      "Stability",
      "Accountability",
      "Achievement",
      "Honoring Commitments",
      "Reliability",
    ],
    "Personal Growth & Education": [
      "Authenticity",
      "Courage",
      "Creativity",
      "Curiosity",
      "Dignity",
      "Flexibility",
      "Freedom",
      "Optimism",
      "Integrity",
      "Learning",
      "Vision",
      "Responsibility",
      "Passion",
      "Perseverance",
      "Patience",
      "Open-Mindedness",
      "Knowledge",
      "Innovation",
      "Humility",
      "Growth",
      "Discipline",
      "Honesty",
      "Respect",
      "Wealth",
      "Accountability",
      "Achievement",
      "Forgiveness",
      "Honoring Commitments",
      "Reliability",
      "Generosity",
    ],
    "Finances": [
      "Responsibility",
      "Security",
      "Stability",
      "Balance",
      "Vision",
      "Success",
      "Independence",
      "Freedom",
      "Wealth",
      "Accountability",
      "Achievement",
      "Generosity",
    ],
    "Recreation & Leisure": [
      "Adventure",
      "Humor",
      "Happiness",
      "Passion",
      "Balance",
      "Independence",
      "Friendship",
      "Curiosity",
      "Community",
      "Achievement",
      "Honoring Commitments",
    ],
    "Community & Contribution": [
      "Compassion",
      "Community",
      "Service",
      "Justice",
      "Leadership",
      "Contribution",
      "Empathy",
      "Environmentalism",
      "Equality",
      "Friendship",
      "Gratitude",
      "Honor",
      "Kindness",
      "Love",
      "Teamwork",
      "Respect",
      "Wealth",
      "Generosity",
      "Honoring Commitments",
      "Reliability",
    ],
    "Family & Relationships": [
      "Compassion",
      "Empathy",
      "Family",
      "Friendship",
      "Gratitude",
      "Love",
      "Loyalty",
      "Patience",
      "Respect",
      "Trust",
      "Balance",
      "Happiness",
      "Honor",
      "Humor",
      "Independence",
      "Kindness",
      "Open-Mindedness",
      "Passion",
      "Responsibility",
      "Tradition",
      "Honesty",
      "Accountability",
      "Forgiveness",
      "Honoring Commitments",
      "Reliability",
    ],
    "Environment & Home": [
      "Spirituality",
      "Stability",
      "Happiness",
      "Gratitude",
      "Community",
      "Environmentalism",
      "Adventure",
      "Creativity",
      "Security",
      "Tradition",
      "Vitality",
      "Honor",
      "Humility",
      "Respect",
      "Family",
    ],
  };

  /**
 * Calculate scores for each life domain based on the user's selected values.
 * @param {Array} selectedValues - Array of values selected by the user.
 * @returns {Array} Ranked list of life domains with their scores.
 */
  export const calculateLifeDomainScores = (selectedValues) => {
    if (!Array.isArray(selectedValues) || selectedValues.length === 0) {
      console.warn("No selected values provided. Returning zero percentages for all domains.");
      return Object.keys(lifeDomains).map((domain) => ({
        domain,
        percentage: 0,
      }));
    }
  
    return Object.entries(lifeDomains)
      .map(([domain, values]) => {
        const selectedCount = selectedValues.filter((value) => values.includes(value)).length;
        const totalCount = values.length;
  
        // Prevent division by zero
        const percentage = totalCount > 0 ? Math.round((selectedCount / totalCount) * 100) : 0;
  
        return { domain, percentage };
      })
      .sort((a, b) => b.percentage - a.percentage); // Sort by percentage, descending
  };